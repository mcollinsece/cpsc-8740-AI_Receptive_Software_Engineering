AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Movie Recommender ECS Service'

Parameters:
  ECRImageUri:
    Type: String
    Description: 'URI of the ECR container image'
    Default: '739275463201.dkr.ecr.us-east-1.amazonaws.com/movie-recommender-lambda:latest'
  ServiceName:
    Type: String
    Default: 'movie-recommender'
    Description: 'Name of the ECS service'
  DesiredCount:
    Type: Number
    Default: 1
    Description: 'Number of tasks to run'
  ContainerPort:
    Type: Number
    Default: 5000
    Description: 'Port the container listens on'
  ContainerMemory:
    Type: Number
    Default: 4096
    Description: 'Memory allocated to the container (in MiB)'
  ContainerCPU:
    Type: Number
    Default: 2048
    Description: 'CPU units allocated to the container (1024 units = 1 vCPU)'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:*
                Resource: '*'

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ServiceName}
      RetentionInDays: 30

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/ecs/${ServiceName}:*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource:
                  - !GetAtt MoviesTable.Arn
                  - !GetAtt TagsTable.Arn
                  - !GetAtt LinksTable.Arn
                  - !GetAtt RatingsTable.Arn

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceName
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCPU
      Memory: !Ref ContainerMemory
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref ECRImageUri
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub /ecs/${ServiceName}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
              awslogs-create-group: 'true'
          Environment:
            - Name: FLASK_APP
              Value: recommender_service.py
            - Name: FLASK_ENV
              Value: production

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Security group for ${ServiceName}
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-alb
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-tg
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckPath: /recommend
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      HealthCheckProtocol: HTTP
      HealthCheckPort: !Ref ContainerPort
      Matcher:
        HttpCode: '415'

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: TargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ContainerPort
      Protocol: HTTP

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: !Ref DesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort

  MoviesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-movies
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: movieId
          AttributeType: N
        - AttributeName: title
          AttributeType: S
      KeySchema:
        - AttributeName: movieId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: TitleIndex
          KeySchema:
            - AttributeName: title
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-movies

  LinksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-links
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: movieId
          AttributeType: N
        - AttributeName: imdbId
          AttributeType: S
        - AttributeName: tmdbId
          AttributeType: S
      KeySchema:
        - AttributeName: movieId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ImdbIdIndex
          KeySchema:
            - AttributeName: imdbId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: TmdbIdIndex
          KeySchema:
            - AttributeName: tmdbId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-links

  RatingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-ratings
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: N
        - AttributeName: movieId
          AttributeType: N
        - AttributeName: rating
          AttributeType: N
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: movieId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: MovieRatingsIndex
          KeySchema:
            - AttributeName: movieId
              KeyType: HASH
            - AttributeName: rating
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: UserRatingsByTimeIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-ratings

  TagsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ServiceName}-tags
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: movieId
          AttributeType: N
        - AttributeName: userId
          AttributeType: N
        - AttributeName: tag
          AttributeType: S
      KeySchema:
        - AttributeName: movieId
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: TagIndex
          KeySchema:
            - AttributeName: tag
              KeyType: HASH
            - AttributeName: movieId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Name
          Value: !Sub ${ServiceName}-tags

Outputs:
  ServiceName:
    Description: 'Name of the ECS service'
    Value: !Ref ServiceName
  LoadBalancerDNS:
    Description: 'DNS name of the load balancer'
    Value: !GetAtt LoadBalancer.DNSName
  ClusterName:
    Description: 'Name of the ECS cluster'
    Value: !Ref ECSCluster
  TaskDefinition:
    Description: 'ARN of the task definition'
    Value: !Ref TaskDefinition
  MoviesTableName:
    Description: 'Name of the Movies DynamoDB table'
    Value: !Ref MoviesTable
  TagsTableName:
    Description: 'Name of the Tags DynamoDB table'
    Value: !Ref TagsTable
  LinksTableName:
    Description: 'Name of the Links DynamoDB table'
    Value: !Ref LinksTable
  RatingsTableName:
    Description: 'Name of the Ratings DynamoDB table'
    Value: !Ref RatingsTable 